name: Server Installer macOS-Latest Build and Test

on:
  push:
    branches: ["main"]
    tags:
      - v*
  pull_request:
  merge_group:
  workflow_dispatch:

jobs:
  make-server-installer:
    runs-on: macos-latest  # Apple Silicon (M1) runners
    strategy:
      matrix:
        python-version: ['3.10', '3.12']
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.python-version }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          # Install rumps for macOS tray support
          pip install rumps
          # Install the package in development mode
          pip install -e .

      - name: Verify macOS Apple Silicon platform
        run: |
          echo "Platform: $(uname -s) $(uname -m)"
          if [[ $(uname -m) != "arm64" ]]; then
            echo "Warning: Not running on Apple Silicon"
          else
            echo "Running on Apple Silicon"
          fi

      - name: Create macOS app bundle and DMG installer
        run: |
          # Create installer directory structure
          mkdir -p installer/macos
          
          # Install the package in development mode first
          pip install -e .
          
          # Run our app bundle creator
          python installer/macos/create_app_bundle.py installer/macos ${{ matrix.python-version }}
          
          # Rename the DMG to include Python version
          mv "installer/macos/Lemonade-Server.dmg" "lemonade-server-macos-arm64-py${{ matrix.python-version }}.dmg"
          
          echo "macOS installer DMG created: lemonade-server-macos-arm64-py${{ matrix.python-version }}.dmg"

      - name: Test the DMG installer package
        run: |
          # Verify the DMG file exists
          DMG_FILE="lemonade-server-macos-arm64-py${{ matrix.python-version }}.dmg"
          if [[ -f "$DMG_FILE" ]]; then
              echo "DMG installer found: $DMG_FILE"
          else
              echo "DMG installer not found: $DMG_FILE"
              exit 1
          fi
          
          # Mount the DMG to verify contents
          echo "Mounting DMG..."
          hdiutil attach "$DMG_FILE" -mountpoint /tmp/lemonade_test
          
          # Verify the app bundle exists
          if [[ -d "/tmp/lemonade_test/Lemonade Server.app" ]]; then
              echo "App bundle found in DMG"
          else
              echo "App bundle not found in DMG"
              hdiutil detach /tmp/lemonade_test
              exit 1
          fi
          
          # Verify the executable exists and is executable
          if [[ -x "/tmp/lemonade_test/Lemonade Server.app/Contents/MacOS/lemonade-server" ]]; then
              echo "Main executable found and is executable"
          else
              echo "Main executable not found or not executable"
              hdiutil detach /tmp/lemonade_test
              exit 1
          fi
          
          # Verify Info.plist exists
          if [[ -f "/tmp/lemonade_test/Lemonade Server.app/Contents/Info.plist" ]]; then
              echo "Info.plist found"
          else
              echo "Info.plist not found"
              hdiutil detach /tmp/lemonade_test
              exit 1
          fi
          
          # Unmount the DMG
          hdiutil detach /tmp/lemonade_test
          echo "DMG installer verification complete"

      - name: Test Lemonade Server functionality
        run: |
          echo "Testing Lemonade Server startup and functionality..."
          
          # Start server with tray disabled for testing
          lemonade-server-dev serve --no-tray --port 8001 &
          SERVER_PID=$!
          
          # Wait for server to start
          echo "Waiting for server to start..."
          sleep 15
          
          # Check if server process is running
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "Error: Server process is not running"
            exit 1
          else
            echo "Server process is running"
          fi
          
          # Wait for the server port to come up
          echo "Waiting for server port to be available..."
          RETRY_COUNT=0
          MAX_RETRIES=10
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -s http://localhost:8001/api/v0/health > /dev/null; then
              echo "Server is responding on port 8001"
              break
            else
              echo "Server not yet responding, retrying..."
              sleep 3
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Error: Server failed to respond after $MAX_RETRIES retries"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi
          
          # Test the health endpoint
          echo "Checking the /health endpoint"
          HEALTH_RESPONSE=$(curl -s http://localhost:8001/api/v0/health)
          
          if echo "$HEALTH_RESPONSE" | grep -q '"status":"ok"'; then
            echo "Good: /health endpoint returned OK status"
            echo "Health response: $HEALTH_RESPONSE"
          else
            echo "Error: /health endpoint did not return OK status"
            echo "Response: $HEALTH_RESPONSE"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi
          
          # Test the models endpoint
          echo "Checking the /models endpoint"
          MODELS_RESPONSE=$(curl -s http://localhost:8001/api/v0/models)
          
          if echo "$MODELS_RESPONSE" | grep -q '"data"'; then
            echo "Good: /models endpoint returned valid response"
          else
            echo "Error: /models endpoint did not return valid response"
            echo "Response: $MODELS_RESPONSE"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi
          
          # Clean shutdown
          echo "Shutting down server"
          kill $SERVER_PID 2>/dev/null || true
          sleep 3
          
          # Ensure the server process is closed
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "Warning: Server process still running, force killing"
            kill -9 $SERVER_PID 2>/dev/null || true
          else
            echo "Server process shut down cleanly"
          fi

      - name: Upload macOS Installer
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: LemonadeServerMacOSInstaller-py${{ matrix.python-version }}
          path: |
            lemonade-server-macos-arm64-py${{ matrix.python-version }}.dmg

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: lemonade-server-macos-arm64-py${{ matrix.python-version }}.dmg
