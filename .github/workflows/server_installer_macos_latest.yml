name: Server Installer macOS-Latest Build and Test

on:
  push:
    branches: ["main"]
    tags:
      - v*
  pull_request:
  merge_group:
  workflow_dispatch:

jobs:
  make-server-installer:
    runs-on: macos-latest  # Apple Silicon (M1) runners
    strategy:
      matrix:
        python-version: ['3.10', '3.12']
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.python-version }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          # Install rumps for macOS tray support
          pip install rumps
          # Install the package in development mode
          pip install -e .

      - name: Verify macOS Apple Silicon platform
        run: |
          echo "Platform: $(uname -s) $(uname -m)"
          if [[ $(uname -m) != "arm64" ]]; then
            echo "Warning: Not running on Apple Silicon"
          else
            echo "Running on Apple Silicon"
          fi

      - name: Test macOS Apple Silicon support
        run: |
          python test/server_llamacpp.py metal

      - name: Create macOS installer package
        run: |
          # Create installer directory structure
          mkdir -p installer/macos
          
          # Create installation script
          cat > installer/macos/install.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Installing Lemonade Server for macOS Apple Silicon..."
          
          # Check if we're on Apple Silicon
          if [[ $(uname -m) != "arm64" ]]; then
              echo "Error: This installer is for Apple Silicon Macs only"
              echo "   Detected architecture: $(uname -m)"
              exit 1
          fi
          
          # Check if Python 3.10+ is available
          if ! command -v python3 &> /dev/null; then
              echo "Error: Python 3 is required but not installed"
              echo "   Please install Python 3.10+ from https://www.python.org/"
              exit 1
          fi
          
          # Check Python version
          PYTHON_VERSION=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
          echo "Detected Python version: $PYTHON_VERSION"
          
          # Verify minimum version (3.10)
          if ! python3 -c "import sys; sys.exit(0 if sys.version_info >= (3, 10) else 1)"; then
              echo "Error: Python 3.10+ is required"
              echo "   Detected: Python $PYTHON_VERSION"
              echo "   Please upgrade Python from https://www.python.org/"
              exit 1
          fi
          
          # Install Lemonade Server with CPU support (Metal backend will be used automatically)
          echo "Installing Lemonade Server..."
          pip3 install lemonade-sdk[oga-cpu] --upgrade
          
          # Install macOS tray support
          echo "Installing macOS tray support..."
          pip3 install rumps
          
          echo ""
          echo "Lemonade Server installation complete!"
          echo ""
          echo "To start the server:"
          echo "   lemonade-server-dev serve"
          echo ""
          echo "To chat with a model:"
          echo "   lemonade-server-dev run Qwen2.5-0.5B-Instruct-CPU"
          echo ""
          echo "Documentation: https://lemonade-server.ai/docs/"
          EOF
          
          chmod +x installer/macos/install.sh
          
          # Create README for the installer
          cat > installer/macos/README.md << 'EOF'
          # Lemonade Server for macOS Apple Silicon
          
          ## Requirements
          - macOS with Apple Silicon (M1, M2, M3, etc.)
          - Python 3.10 or later
          
          ## Installation
          
          Run the installation script:
          ```bash
          ./install.sh
          ```
          
          ## Features
          - **Metal Backend**: Automatically uses Apple's Metal framework for GPU acceleration
          - **Native Tray**: Menu bar integration with native macOS notifications
          - **Apple Silicon Optimized**: Built specifically for Apple Silicon processors
          
          ## Usage
          
          Start the server:
          ```bash
          lemonade-server-dev serve
          ```
          
          The tray icon will appear in your menu bar with options to:
          - Load and manage models
          - Change server settings
          - View logs and documentation
          - Access chat interface
          
          ## Supported Models
          All models that support the Metal backend, including:
          - Qwen2.5 series
          - Llama 3.2 series  
          - Phi-3 series
          - And many more!
          EOF
          
          # Create the distribution archive
          cd installer/macos
          tar -czf ../../lemonade-server-macos-arm64-py${{ matrix.python-version }}.tar.gz install.sh README.md
          cd ../..
          
          echo "macOS installer package created: lemonade-server-macos-arm64-py${{ matrix.python-version }}.tar.gz"

      - name: Test the installer package
        run: |
          # Extract and verify the installer
          mkdir -p test_install
          cd test_install
          tar -xzf ../lemonade-server-macos-arm64-py${{ matrix.python-version }}.tar.gz
          
          # Verify files exist
          if [[ -f install.sh && -f README.md ]]; then
              echo "Installer package contents verified"
          else
              echo "Installer package missing files"
              exit 1
          fi
          
          # Test that the install script is executable
          if [[ -x install.sh ]]; then
              echo "Install script is executable"
          else
              echo "Install script is not executable"
              exit 1
          fi
          
          cd ..

      - name: Test Lemonade Server functionality
        run: |
          echo "Testing Lemonade Server startup and functionality..."
          
          # Start server with tray disabled for testing
          lemonade-server-dev serve --no-tray --port 8001 &
          SERVER_PID=$!
          
          # Wait for server to start
          echo "Waiting for server to start..."
          sleep 15
          
          # Check if server process is running
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "Error: Server process is not running"
            exit 1
          else
            echo "Server process is running"
          fi
          
          # Wait for the server port to come up
          echo "Waiting for server port to be available..."
          RETRY_COUNT=0
          MAX_RETRIES=10
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -s http://localhost:8001/api/v0/health > /dev/null; then
              echo "Server is responding on port 8001"
              break
            else
              echo "Server not yet responding, retrying..."
              sleep 3
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Error: Server failed to respond after $MAX_RETRIES retries"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi
          
          # Test the health endpoint
          echo "Checking the /health endpoint"
          HEALTH_RESPONSE=$(curl -s http://localhost:8001/api/v0/health)
          
          if echo "$HEALTH_RESPONSE" | grep -q '"status":"ok"'; then
            echo "Good: /health endpoint returned OK status"
            echo "Health response: $HEALTH_RESPONSE"
          else
            echo "Error: /health endpoint did not return OK status"
            echo "Response: $HEALTH_RESPONSE"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi
          
          # Test the models endpoint
          echo "Checking the /models endpoint"
          MODELS_RESPONSE=$(curl -s http://localhost:8001/api/v0/models)
          
          if echo "$MODELS_RESPONSE" | grep -q '"data"'; then
            echo "Good: /models endpoint returned valid response"
          else
            echo "Error: /models endpoint did not return valid response"
            echo "Response: $MODELS_RESPONSE"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi
          
          # Clean shutdown
          echo "Shutting down server"
          kill $SERVER_PID 2>/dev/null || true
          sleep 3
          
          # Ensure the server process is closed
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "Warning: Server process still running, force killing"
            kill -9 $SERVER_PID 2>/dev/null || true
          else
            echo "Server process shut down cleanly"
          fi

      - name: Upload macOS Installer
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: LemonadeServerMacOSInstaller-py${{ matrix.python-version }}
          path: |
            lemonade-server-macos-arm64-py${{ matrix.python-version }}.tar.gz

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: lemonade-server-macos-arm64-py${{ matrix.python-version }}.tar.gz
